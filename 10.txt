#include <iostream>
using namespace std;

class CircularQueue {
private:
    int* arr;
    int front, rear, size;
    
public:
    // Constructor to initialize the queue with a fixed size
    CircularQueue(int s) {
        size = s;
        arr = new int[size];
        front = rear = -1;
    }

    // Destructor to free memory
    ~CircularQueue() {
        delete[] arr;
    }

    // Enqueue operation (insertion)
    void enqueue(int value) {
        if ((rear + 1) % size == front) {  // Queue is full
            cout << "Queue is full! Cannot enqueue " << value << endl;
        } else {
            if (front == -1) {  // If the queue is empty
                front = rear = 0;
            } else {
                rear = (rear + 1) % size;  // Circular increment
            }
            arr[rear] = value;
            cout << value << " enqueued to queue." << endl;
        }
    }

    // Dequeue operation (deletion)
    void dequeue() {
        if (front == -1) {  // Queue is empty
            cout << "Queue is empty! Cannot dequeue." << endl;
        } else {
            int dequeuedValue = arr[front];
            if (front == rear) {  // Only one element in the queue
                front = rear = -1;  // Reset the queue
            } else {
                front = (front + 1) % size;  // Circular increment
            }
            cout << dequeuedValue << " dequeued from queue." << endl;
        }
    }

    // Display the elements of the queue
    void display() {
        if (front == -1) {  // Queue is empty
            cout << "Queue is empty!" << endl;
        } else {
            cout << "Queue elements: ";
            int i = front;
            while (i != rear) {
                cout << arr[i] << " ";
                i = (i + 1) % size;  // Circular increment
            }
            cout << arr[rear] << endl;  // Print the last element
        }
    }
};

int main() {
    int size;
    cout << "Enter the size of the queue: ";
    cin >> size;
    
    CircularQueue q(size);

    q.enqueue(10);
    q.enqueue(20);
    q.enqueue(30);
    q.enqueue(40);

    q.display();

    q.dequeue();
    q.display();

    q.enqueue(50);
    q.enqueue(60);
    q.enqueue(70);

    q.display();

    q.dequeue();
    q.dequeue();
    q.display();

    return 0;
}
