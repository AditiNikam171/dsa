#include <iostream>
#include <stack>
#include <string>
#include <cctype>
using namespace std;

// Structure for the expression tree nodes
struct Node {
    char data;
    Node* left;
    Node* right;

    Node(char val) {
        data = val;
        left = right = nullptr;
    }
};

// Function to check if the character is an operand (i.e., a digit)
bool isOperand(char ch) {
    return isdigit(ch);
}

// Function to construct the expression tree from the prefix expression
Node* constructTree(const string& prefix) {
    stack<Node*> s;

    // Traverse the prefix expression from right to left
    for (int i = prefix.length() - 1; i >= 0; i--) {
        char ch = prefix[i];

        if (isOperand(ch)) {
            s.push(new Node(ch));  // Operand: Create a new node and push it onto the stack
        } else {
            Node* operatorNode = new Node(ch);  // Operator: Create a new node for the operator

            // Pop two operands from the stack to be the left and right children
            operatorNode->left = s.top();
            s.pop();
            operatorNode->right = s.top();
            s.pop();

            // Push the new operator node onto the stack
            s.push(operatorNode);
        }
    }

    // The last remaining node on the stack is the root of the expression tree
    return s.top();
}

// Recursive in-order traversal of the expression tree
void inorderRecursive(Node* root) {
    if (root == nullptr) return;

    inorderRecursive(root->left);  // Visit the left subtree
    cout << root->data << " ";      // Visit the node
    inorderRecursive(root->right); // Visit the right subtree
}

// Non-recursive in-order traversal of the expression tree using a stack
void inorderNonRecursive(Node* root) {
    stack<Node*> s;
    Node* current = root;

    while (current != nullptr || !s.empty()) {
        // Reach the leftmost node of the current node
        while (current != nullptr) {
            s.push(current);
            current = current->left;
        }

        // Current must be nullptr at this point
        current = s.top();
        s.pop();

        cout << current->data << " ";  // Visit the node

        // Now visit the right subtree
        current = current->right;
    }
}

int main() {
    string prefix;
    cout << "Enter a prefix expression: ";
    cin >> prefix;

    // Construct the expression tree from the prefix expression
    Node* root = constructTree(prefix);

    // Display the expression using recursive in-order traversal
    cout << "In-order traversal (Recursive): ";
    inorderRecursive(root);
    cout << endl;

    // Display the expression using non-recursive in-order traversal
    cout << "In-order traversal (Non-recursive): ";
    inorderNonRecursive(root);
    cout << endl;

    return 0;
}
