#include <iostream>
using namespace std;

// Structure for the node of the Binary Search Tree
struct Node {
    int data;
    Node* left;
    Node* right;

    // Constructor
    Node(int val) {
        data = val;
        left = right = nullptr;
    }
};

// Binary Search Tree class
class BST {
private:
    Node* root;

    // Helper function for insertion
    Node* insert(Node* node, int data) {
        // If the tree is empty, create a new node
        if (node == nullptr)
            return new Node(data);

        // Otherwise, recur down the tree
        if (data < node->data) {
            node->left = insert(node->left, data);  // Insert in left subtree
        } else if (data > node->data) {
            node->right = insert(node->right, data); // Insert in right subtree
        }

        // Return the (unchanged) node pointer
        return node;
    }

    // Helper function for searching
    Node* search(Node* node, int data) {
        // Base cases: root is null or data is present at the root
        if (node == nullptr || node->data == data)
            return node;

        // Data is greater than root's data, search in the right subtree
        if (data > node->data)
            return search(node->right, data);

        // Data is smaller than root's data, search in the left subtree
        return search(node->left, data);
    }

    // Helper function for deleting a node
    Node* deleteNode(Node* root, int data) {
        // Base case: root is null
        if (root == nullptr) return root;

        // If the data to be deleted is smaller than the root's data, then it lies in left subtree
        if (data < root->data)
            root->left = deleteNode(root->left, data);

        // If the data to be deleted is greater than the root's data, then it lies in right subtree
        else if (data > root->data)
            root->right = deleteNode(root->right, data);

        // If data is same as root's data, then this is the node to be deleted
        else {
            // Node with only one child or no child
            if (root->left == nullptr) {
                Node* temp = root->right;
                delete root;
                return temp;
            } else if (root->right == nullptr) {
                Node* temp = root->left;
                delete root;
                return temp;
            }

            // Node with two children: Get the inorder successor (smallest in the right subtree)
            Node* temp = minValueNode(root->right);

            // Copy the inorder successor's content to this node
            root->data = temp->data;

            // Delete the inorder successor
            root->right = deleteNode(root->right, temp->data);
        }
        return root;
    }

    // Helper function to find the node with the minimum value
    Node* minValueNode(Node* node) {
        Node* current = node;
        while (current && current->left != nullptr)
            current = current->left;
        return current;
    }

    // Helper function for in-order traversal
    void inorder(Node* root) {
        if (root != nullptr) {
            inorder(root->left);
            cout << root->data << " ";
            inorder(root->right);
        }
    }

    // Helper function for pre-order traversal
    void preorder(Node* root) {
        if (root != nullptr) {
            cout << root->data << " ";
            preorder(root->left);
            preorder(root->right);
        }
    }

    // Helper function for post-order traversal
    void postorder(Node* root) {
        if (root != nullptr) {
            postorder(root->left);
            postorder(root->right);
            cout << root->data << " ";
        }
    }

    // Helper function to create a copy of the tree
    Node* copy(Node* node) {
        if (node == nullptr) {
            return nullptr;
        }
        Node* newNode = new Node(node->data);
        newNode->left = copy(node->left);
        newNode->right = copy(node->right);
        return newNode;
    }

public:
    // Constructor
    BST() {
        root = nullptr;
    }

    // Insert a node into the tree
    void insert(int data) {
        root = insert(root, data);
    }

    // Search for a node in the tree
    void search(int data) {
        Node* result = search(root, data);
        if (result != nullptr) {
            cout << "Node " << data << " found in the tree." << endl;
        } else {
            cout << "Node " << data << " not found in the tree." << endl;
        }
    }

    // Delete a node from the tree
    void deleteNode(int data) {
        root = deleteNode(root, data);
    }

    // Display the tree using in-order traversal
    void inorderTraversal() {
        inorder(root);
        cout << endl;
    }

    // Display the tree using pre-order traversal
    void preorderTraversal() {
        preorder(root);
        cout << endl;
    }

    // Display the tree using post-order traversal
    void postorderTraversal() {
        postorder(root);
        cout << endl;
    }

    // Create a copy of the tree
    BST* createCopy() {
        BST* newTree = new BST();
        newTree->root = copy(this->root);
        return newTree;
    }
};

int main() {
    BST tree;

    // Insert nodes
    tree.insert(50);
    tree.insert(30);
    tree.insert(20);
    tree.insert(40);
    tree.insert(70);
    tree.insert(60);
    tree.insert(80);

    // Display the tree using different traversals
    cout << "In-order traversal: ";
    tree.inorderTraversal();
    cout << "Pre-order traversal: ";
    tree.preorderTraversal();
    cout << "Post-order traversal: ";
    tree.postorderTraversal();

    // Search for a node
    tree.search(40);
    tree.search(90);

    // Delete a node and display the tree
    tree.deleteNode(20);
    cout << "In-order traversal after deletion: ";
    tree.inorderTraversal();

    // Create a copy of the tree
    BST* copiedTree = tree.createCopy();
    cout << "In-order traversal of the copied tree: ";
    copiedTree->inorderTraversal();

    return 0;
}
