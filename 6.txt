#include <iostream>
#include <string>
#include <cctype>
using namespace std;

// Node structure for singly linked list (stack implementation)
struct Node {
    char data;
    Node* next;
};

// Stack class using singly linked list
class Stack {
public:
    Node* top;
    
    Stack() {
        top = nullptr;
    }

    // Push an element onto the stack
    void push(char value) {
        Node* newNode = new Node();
        newNode->data = value;
        newNode->next = top;
        top = newNode;
    }

    // Pop an element from the stack
    char pop() {
        if (top == nullptr) {
            cout << "Stack is empty!" << endl;
            return '\0';  // Return null character if stack is empty
        }
        char poppedValue = top->data;
        Node* temp = top;
        top = top->next;
        delete temp;
        return poppedValue;
    }

    // Peek the top element of the stack
    char peek() {
        if (top == nullptr) return '\0';
        return top->data;
    }

    // Check if the stack is empty
    bool isEmpty() {
        return top == nullptr;
    }
};

// Function to return precedence of operators
int precedence(char op) {
    if (op == '+' || op == '-') return 1;
    if (op == '*' || op == '/') return 2;
    return 0;
}

// Function to convert infix expression to postfix expression
string infixToPostfix(string infix) {
    Stack s;
    string postfix = "";
    
    for (int i = 0; i < infix.length(); i++) {
        char ch = infix[i];
        
        // If the character is an operand, add it to the output
        if (isalnum(ch)) {
            postfix += ch;
        }
        // If the character is '(', push it to the stack
        else if (ch == '(') {
            s.push(ch);
        }
        // If the character is ')', pop from the stack until '(' is encountered
        else if (ch == ')') {
            while (!s.isEmpty() && s.peek() != '(') {
                postfix += s.pop();
            }
            s.pop();  // Pop '('
        }
        // If the character is an operator
        else {
            while (!s.isEmpty() && precedence(s.peek()) >= precedence(ch)) {
                postfix += s.pop();
            }
            s.push(ch);
        }
    }
    
    // Pop all the operators from the stack
    while (!s.isEmpty()) {
        postfix += s.pop();
    }
    
    return postfix;
}

int main() {
    string infix;
    cout << "Enter infix expression: ";
    getline(cin, infix);
    
    // Convert the infix expression to postfix
    string postfix = infixToPostfix(infix);
    
    cout << "Postfix expression: " << postfix << endl;

    return 0;
}
